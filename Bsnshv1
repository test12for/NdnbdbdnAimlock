#include <iostream>
#include <cmath>

struct Vector3 {
    float x, y, z;

    Vector3() : x(0), y(0), z(0) {}
    Vector3(float x, float y, float z) : x(x), y(y), z(z) {}

    float distanceTo(const Vector3& other) const {
        return sqrt(pow(x - other.x, 2) + pow(y - other.y, 2) + pow(z - other.z, 2));
    }
};

struct Player {
    Vector3 position;   // Tâm của body (body center)
    Vector3 head;       // Vị trí đầu người chơi (hitbox chính)
    float radius;       // Bán kính vùng tròn

    Player(const Vector3& pos, const Vector3& headPos, float rad)
        : position(pos), head(headPos), radius(rad) {}

    // Giữ vị trí đầu người chơi cố định
    void lockHeadPosition() {
        head = position; // Head luôn là tâm (nếu cần cố định)
    }

    // Kiểm tra điểm có nằm trong vùng tròn không
    bool isWithinCircle(const Vector3& point) const {
        float distance = head.distanceTo(point);
        return distance <= radius;
    }
};

int main() {
    // Khởi tạo người chơi
    Vector3 playerPosition(0.0f, 0.0f, 0.0f);
    Vector3 playerHead(0.0f, 1.8f, 0.0f); // Đầu nằm trên body 1.8m (giả định game nhân vật người)
    float zoneRadius = 2.5f;              // Bán kính vùng tròn 2.5m

    Player player(playerPosition, playerHead, zoneRadius);

    // Khóa vị trí đầu người chơi
    player.lockHeadPosition();

    // Kiểm tra một số điểm
    Vector3 testPoint1(1.0f, 1.8f, 1.0f); // Điểm trong vùng
    Vector3 testPoint2(3.0f, 1.8f, 3.0f); // Điểm ngoài vùng

    std::cout << "Test Point 1 is within circle: " 
              << (player.isWithinCircle(testPoint1) ? "Yes" : "No") << std::endl;

    std::cout << "Test Point 2 is within circle: " 
              << (player.isWithinCircle(testPoint2) ? "Yes" : "No") << std::endl;

    return 0;
}
